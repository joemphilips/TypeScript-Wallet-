/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.LighthouseServer.ACK', null, global);
goog.exportSymbol('proto.LighthouseServer.CommunityWalletCommitment', null, global);
goog.exportSymbol('proto.LighthouseServer.Output', null, global);
goog.exportSymbol('proto.LighthouseServer.Payment', null, global);
goog.exportSymbol('proto.LighthouseServer.PaymentACK', null, global);
goog.exportSymbol('proto.LighthouseServer.PaymentDetails', null, global);
goog.exportSymbol('proto.LighthouseServer.PaymentRequest', null, global);
goog.exportSymbol('proto.LighthouseServer.PingRequest', null, global);
goog.exportSymbol('proto.LighthouseServer.PingResponse', null, global);
goog.exportSymbol('proto.LighthouseServer.PledgeDetails', null, global);
goog.exportSymbol('proto.LighthouseServer.ProjectDetail', null, global);
goog.exportSymbol('proto.LighthouseServer.ProjectDetail.Network', null, global);
goog.exportSymbol('proto.LighthouseServer.ProjectDetail.PKIType', null, global);
goog.exportSymbol('proto.LighthouseServer.ProjectStatus', null, global);
goog.exportSymbol('proto.LighthouseServer.UserData', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LighthouseServer.PingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LighthouseServer.PingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LighthouseServer.PingRequest.displayName = 'proto.LighthouseServer.PingRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LighthouseServer.PingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.LighthouseServer.PingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LighthouseServer.PingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LighthouseServer.PingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LighthouseServer.PingRequest}
 */
proto.LighthouseServer.PingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LighthouseServer.PingRequest;
  return proto.LighthouseServer.PingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LighthouseServer.PingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LighthouseServer.PingRequest}
 */
proto.LighthouseServer.PingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LighthouseServer.PingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LighthouseServer.PingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LighthouseServer.PingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LighthouseServer.PingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.LighthouseServer.PingRequest.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LighthouseServer.PingRequest.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LighthouseServer.PingResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LighthouseServer.PingResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LighthouseServer.PingResponse.displayName = 'proto.LighthouseServer.PingResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LighthouseServer.PingResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.LighthouseServer.PingResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LighthouseServer.PingResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LighthouseServer.PingResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LighthouseServer.PingResponse}
 */
proto.LighthouseServer.PingResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LighthouseServer.PingResponse;
  return proto.LighthouseServer.PingResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LighthouseServer.PingResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LighthouseServer.PingResponse}
 */
proto.LighthouseServer.PingResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LighthouseServer.PingResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LighthouseServer.PingResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LighthouseServer.PingResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LighthouseServer.PingResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.LighthouseServer.PingResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LighthouseServer.PingResponse.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LighthouseServer.ACK = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LighthouseServer.ACK, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LighthouseServer.ACK.displayName = 'proto.LighthouseServer.ACK';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LighthouseServer.ACK.prototype.toObject = function(opt_includeInstance) {
  return proto.LighthouseServer.ACK.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LighthouseServer.ACK} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LighthouseServer.ACK.toObject = function(includeInstance, msg) {
  var f, obj = {
    ack: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LighthouseServer.ACK}
 */
proto.LighthouseServer.ACK.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LighthouseServer.ACK;
  return proto.LighthouseServer.ACK.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LighthouseServer.ACK} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LighthouseServer.ACK}
 */
proto.LighthouseServer.ACK.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAck(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LighthouseServer.ACK.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LighthouseServer.ACK.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LighthouseServer.ACK} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LighthouseServer.ACK.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAck();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 ack = 1;
 * @return {number}
 */
proto.LighthouseServer.ACK.prototype.getAck = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.LighthouseServer.ACK.prototype.setAck = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LighthouseServer.CommunityWalletCommitment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.LighthouseServer.CommunityWalletCommitment.repeatedFields_, null);
};
goog.inherits(proto.LighthouseServer.CommunityWalletCommitment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LighthouseServer.CommunityWalletCommitment.displayName = 'proto.LighthouseServer.CommunityWalletCommitment';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.LighthouseServer.CommunityWalletCommitment.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LighthouseServer.CommunityWalletCommitment.prototype.toObject = function(opt_includeInstance) {
  return proto.LighthouseServer.CommunityWalletCommitment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LighthouseServer.CommunityWalletCommitment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LighthouseServer.CommunityWalletCommitment.toObject = function(includeInstance, msg) {
  var f, obj = {
    communitymemberidList: jspb.Message.getRepeatedField(msg, 1),
    xpub: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LighthouseServer.CommunityWalletCommitment}
 */
proto.LighthouseServer.CommunityWalletCommitment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LighthouseServer.CommunityWalletCommitment;
  return proto.LighthouseServer.CommunityWalletCommitment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LighthouseServer.CommunityWalletCommitment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LighthouseServer.CommunityWalletCommitment}
 */
proto.LighthouseServer.CommunityWalletCommitment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addCommunitymemberid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setXpub(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LighthouseServer.CommunityWalletCommitment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LighthouseServer.CommunityWalletCommitment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LighthouseServer.CommunityWalletCommitment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LighthouseServer.CommunityWalletCommitment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommunitymemberidList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getXpub();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated string communityMemberID = 1;
 * @return {!Array.<string>}
 */
proto.LighthouseServer.CommunityWalletCommitment.prototype.getCommunitymemberidList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<string>} value */
proto.LighthouseServer.CommunityWalletCommitment.prototype.setCommunitymemberidList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.LighthouseServer.CommunityWalletCommitment.prototype.addCommunitymemberid = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.LighthouseServer.CommunityWalletCommitment.prototype.clearCommunitymemberidList = function() {
  this.setCommunitymemberidList([]);
};


/**
 * optional string xpub = 2;
 * @return {string}
 */
proto.LighthouseServer.CommunityWalletCommitment.prototype.getXpub = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.LighthouseServer.CommunityWalletCommitment.prototype.setXpub = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LighthouseServer.Output = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LighthouseServer.Output, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LighthouseServer.Output.displayName = 'proto.LighthouseServer.Output';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LighthouseServer.Output.prototype.toObject = function(opt_includeInstance) {
  return proto.LighthouseServer.Output.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LighthouseServer.Output} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LighthouseServer.Output.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    script: msg.getScript_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LighthouseServer.Output}
 */
proto.LighthouseServer.Output.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LighthouseServer.Output;
  return proto.LighthouseServer.Output.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LighthouseServer.Output} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LighthouseServer.Output}
 */
proto.LighthouseServer.Output.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setScript(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LighthouseServer.Output.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LighthouseServer.Output.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LighthouseServer.Output} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LighthouseServer.Output.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getScript_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint64 amount = 1;
 * @return {number}
 */
proto.LighthouseServer.Output.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.LighthouseServer.Output.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes script = 2;
 * @return {!(string|Uint8Array)}
 */
proto.LighthouseServer.Output.prototype.getScript = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes script = 2;
 * This is a type-conversion wrapper around `getScript()`
 * @return {string}
 */
proto.LighthouseServer.Output.prototype.getScript_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getScript()));
};


/**
 * optional bytes script = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScript()`
 * @return {!Uint8Array}
 */
proto.LighthouseServer.Output.prototype.getScript_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getScript()));
};


/** @param {!(string|Uint8Array)} value */
proto.LighthouseServer.Output.prototype.setScript = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LighthouseServer.PaymentDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.LighthouseServer.PaymentDetails.repeatedFields_, null);
};
goog.inherits(proto.LighthouseServer.PaymentDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LighthouseServer.PaymentDetails.displayName = 'proto.LighthouseServer.PaymentDetails';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.LighthouseServer.PaymentDetails.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LighthouseServer.PaymentDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.LighthouseServer.PaymentDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LighthouseServer.PaymentDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LighthouseServer.PaymentDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    network: jspb.Message.getFieldWithDefault(msg, 1, ""),
    outputsList: jspb.Message.toObjectList(msg.getOutputsList(),
    proto.LighthouseServer.Output.toObject, includeInstance),
    time: jspb.Message.getFieldWithDefault(msg, 3, 0),
    expires: jspb.Message.getFieldWithDefault(msg, 4, 0),
    memo: jspb.Message.getFieldWithDefault(msg, 5, ""),
    paymentUrl: jspb.Message.getFieldWithDefault(msg, 6, ""),
    merchantData: msg.getMerchantData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LighthouseServer.PaymentDetails}
 */
proto.LighthouseServer.PaymentDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LighthouseServer.PaymentDetails;
  return proto.LighthouseServer.PaymentDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LighthouseServer.PaymentDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LighthouseServer.PaymentDetails}
 */
proto.LighthouseServer.PaymentDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetwork(value);
      break;
    case 2:
      var value = new proto.LighthouseServer.Output;
      reader.readMessage(value,proto.LighthouseServer.Output.deserializeBinaryFromReader);
      msg.addOutputs(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExpires(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPaymentUrl(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMerchantData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LighthouseServer.PaymentDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LighthouseServer.PaymentDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LighthouseServer.PaymentDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LighthouseServer.PaymentDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetwork();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.LighthouseServer.Output.serializeBinaryToWriter
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getExpires();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getMemo();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPaymentUrl();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getMerchantData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional string network = 1;
 * @return {string}
 */
proto.LighthouseServer.PaymentDetails.prototype.getNetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LighthouseServer.PaymentDetails.prototype.setNetwork = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Output outputs = 2;
 * @return {!Array.<!proto.LighthouseServer.Output>}
 */
proto.LighthouseServer.PaymentDetails.prototype.getOutputsList = function() {
  return /** @type{!Array.<!proto.LighthouseServer.Output>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.LighthouseServer.Output, 2));
};


/** @param {!Array.<!proto.LighthouseServer.Output>} value */
proto.LighthouseServer.PaymentDetails.prototype.setOutputsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.LighthouseServer.Output=} opt_value
 * @param {number=} opt_index
 * @return {!proto.LighthouseServer.Output}
 */
proto.LighthouseServer.PaymentDetails.prototype.addOutputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.LighthouseServer.Output, opt_index);
};


proto.LighthouseServer.PaymentDetails.prototype.clearOutputsList = function() {
  this.setOutputsList([]);
};


/**
 * optional uint64 time = 3;
 * @return {number}
 */
proto.LighthouseServer.PaymentDetails.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.LighthouseServer.PaymentDetails.prototype.setTime = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 expires = 4;
 * @return {number}
 */
proto.LighthouseServer.PaymentDetails.prototype.getExpires = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.LighthouseServer.PaymentDetails.prototype.setExpires = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string memo = 5;
 * @return {string}
 */
proto.LighthouseServer.PaymentDetails.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.LighthouseServer.PaymentDetails.prototype.setMemo = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string payment_url = 6;
 * @return {string}
 */
proto.LighthouseServer.PaymentDetails.prototype.getPaymentUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.LighthouseServer.PaymentDetails.prototype.setPaymentUrl = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bytes merchant_data = 7;
 * @return {!(string|Uint8Array)}
 */
proto.LighthouseServer.PaymentDetails.prototype.getMerchantData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes merchant_data = 7;
 * This is a type-conversion wrapper around `getMerchantData()`
 * @return {string}
 */
proto.LighthouseServer.PaymentDetails.prototype.getMerchantData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMerchantData()));
};


/**
 * optional bytes merchant_data = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMerchantData()`
 * @return {!Uint8Array}
 */
proto.LighthouseServer.PaymentDetails.prototype.getMerchantData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMerchantData()));
};


/** @param {!(string|Uint8Array)} value */
proto.LighthouseServer.PaymentDetails.prototype.setMerchantData = function(value) {
  jspb.Message.setProto3BytesField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LighthouseServer.PaymentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LighthouseServer.PaymentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LighthouseServer.PaymentRequest.displayName = 'proto.LighthouseServer.PaymentRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LighthouseServer.PaymentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.LighthouseServer.PaymentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LighthouseServer.PaymentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LighthouseServer.PaymentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentDetailsVersion: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pkiType: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pkiData: msg.getPkiData_asB64(),
    serializedPaymentDetails: msg.getSerializedPaymentDetails_asB64(),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LighthouseServer.PaymentRequest}
 */
proto.LighthouseServer.PaymentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LighthouseServer.PaymentRequest;
  return proto.LighthouseServer.PaymentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LighthouseServer.PaymentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LighthouseServer.PaymentRequest}
 */
proto.LighthouseServer.PaymentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPaymentDetailsVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPkiType(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPkiData(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSerializedPaymentDetails(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LighthouseServer.PaymentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LighthouseServer.PaymentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LighthouseServer.PaymentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LighthouseServer.PaymentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPaymentDetailsVersion();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPkiType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPkiData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getSerializedPaymentDetails_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional uint32 payment_details_version = 1;
 * @return {number}
 */
proto.LighthouseServer.PaymentRequest.prototype.getPaymentDetailsVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.LighthouseServer.PaymentRequest.prototype.setPaymentDetailsVersion = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string pki_type = 2;
 * @return {string}
 */
proto.LighthouseServer.PaymentRequest.prototype.getPkiType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.LighthouseServer.PaymentRequest.prototype.setPkiType = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes pki_data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.LighthouseServer.PaymentRequest.prototype.getPkiData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes pki_data = 3;
 * This is a type-conversion wrapper around `getPkiData()`
 * @return {string}
 */
proto.LighthouseServer.PaymentRequest.prototype.getPkiData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPkiData()));
};


/**
 * optional bytes pki_data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPkiData()`
 * @return {!Uint8Array}
 */
proto.LighthouseServer.PaymentRequest.prototype.getPkiData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPkiData()));
};


/** @param {!(string|Uint8Array)} value */
proto.LighthouseServer.PaymentRequest.prototype.setPkiData = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes serialized_payment_details = 4;
 * @return {!(string|Uint8Array)}
 */
proto.LighthouseServer.PaymentRequest.prototype.getSerializedPaymentDetails = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes serialized_payment_details = 4;
 * This is a type-conversion wrapper around `getSerializedPaymentDetails()`
 * @return {string}
 */
proto.LighthouseServer.PaymentRequest.prototype.getSerializedPaymentDetails_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSerializedPaymentDetails()));
};


/**
 * optional bytes serialized_payment_details = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSerializedPaymentDetails()`
 * @return {!Uint8Array}
 */
proto.LighthouseServer.PaymentRequest.prototype.getSerializedPaymentDetails_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSerializedPaymentDetails()));
};


/** @param {!(string|Uint8Array)} value */
proto.LighthouseServer.PaymentRequest.prototype.setSerializedPaymentDetails = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes signature = 5;
 * @return {!(string|Uint8Array)}
 */
proto.LighthouseServer.PaymentRequest.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes signature = 5;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.LighthouseServer.PaymentRequest.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.LighthouseServer.PaymentRequest.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.LighthouseServer.PaymentRequest.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LighthouseServer.Payment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.LighthouseServer.Payment.repeatedFields_, null);
};
goog.inherits(proto.LighthouseServer.Payment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LighthouseServer.Payment.displayName = 'proto.LighthouseServer.Payment';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.LighthouseServer.Payment.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LighthouseServer.Payment.prototype.toObject = function(opt_includeInstance) {
  return proto.LighthouseServer.Payment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LighthouseServer.Payment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LighthouseServer.Payment.toObject = function(includeInstance, msg) {
  var f, obj = {
    merchantData: msg.getMerchantData_asB64(),
    transactionsList: msg.getTransactionsList_asB64(),
    refundToList: jspb.Message.toObjectList(msg.getRefundToList(),
    proto.LighthouseServer.Output.toObject, includeInstance),
    memo: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LighthouseServer.Payment}
 */
proto.LighthouseServer.Payment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LighthouseServer.Payment;
  return proto.LighthouseServer.Payment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LighthouseServer.Payment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LighthouseServer.Payment}
 */
proto.LighthouseServer.Payment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMerchantData(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addTransactions(value);
      break;
    case 3:
      var value = new proto.LighthouseServer.Output;
      reader.readMessage(value,proto.LighthouseServer.Output.deserializeBinaryFromReader);
      msg.addRefundTo(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LighthouseServer.Payment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LighthouseServer.Payment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LighthouseServer.Payment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LighthouseServer.Payment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMerchantData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTransactionsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
  f = message.getRefundToList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.LighthouseServer.Output.serializeBinaryToWriter
    );
  }
  f = message.getMemo();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional bytes merchant_data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.LighthouseServer.Payment.prototype.getMerchantData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes merchant_data = 1;
 * This is a type-conversion wrapper around `getMerchantData()`
 * @return {string}
 */
proto.LighthouseServer.Payment.prototype.getMerchantData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMerchantData()));
};


/**
 * optional bytes merchant_data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMerchantData()`
 * @return {!Uint8Array}
 */
proto.LighthouseServer.Payment.prototype.getMerchantData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMerchantData()));
};


/** @param {!(string|Uint8Array)} value */
proto.LighthouseServer.Payment.prototype.setMerchantData = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated bytes transactions = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.LighthouseServer.Payment.prototype.getTransactionsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes transactions = 2;
 * This is a type-conversion wrapper around `getTransactionsList()`
 * @return {!Array.<string>}
 */
proto.LighthouseServer.Payment.prototype.getTransactionsList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getTransactionsList()));
};


/**
 * repeated bytes transactions = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionsList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.LighthouseServer.Payment.prototype.getTransactionsList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getTransactionsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.LighthouseServer.Payment.prototype.setTransactionsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.LighthouseServer.Payment.prototype.addTransactions = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.LighthouseServer.Payment.prototype.clearTransactionsList = function() {
  this.setTransactionsList([]);
};


/**
 * repeated Output refund_to = 3;
 * @return {!Array.<!proto.LighthouseServer.Output>}
 */
proto.LighthouseServer.Payment.prototype.getRefundToList = function() {
  return /** @type{!Array.<!proto.LighthouseServer.Output>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.LighthouseServer.Output, 3));
};


/** @param {!Array.<!proto.LighthouseServer.Output>} value */
proto.LighthouseServer.Payment.prototype.setRefundToList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.LighthouseServer.Output=} opt_value
 * @param {number=} opt_index
 * @return {!proto.LighthouseServer.Output}
 */
proto.LighthouseServer.Payment.prototype.addRefundTo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.LighthouseServer.Output, opt_index);
};


proto.LighthouseServer.Payment.prototype.clearRefundToList = function() {
  this.setRefundToList([]);
};


/**
 * optional string memo = 4;
 * @return {string}
 */
proto.LighthouseServer.Payment.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.LighthouseServer.Payment.prototype.setMemo = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LighthouseServer.PaymentACK = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LighthouseServer.PaymentACK, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LighthouseServer.PaymentACK.displayName = 'proto.LighthouseServer.PaymentACK';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LighthouseServer.PaymentACK.prototype.toObject = function(opt_includeInstance) {
  return proto.LighthouseServer.PaymentACK.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LighthouseServer.PaymentACK} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LighthouseServer.PaymentACK.toObject = function(includeInstance, msg) {
  var f, obj = {
    payment: (f = msg.getPayment()) && proto.LighthouseServer.Payment.toObject(includeInstance, f),
    memo: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LighthouseServer.PaymentACK}
 */
proto.LighthouseServer.PaymentACK.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LighthouseServer.PaymentACK;
  return proto.LighthouseServer.PaymentACK.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LighthouseServer.PaymentACK} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LighthouseServer.PaymentACK}
 */
proto.LighthouseServer.PaymentACK.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.LighthouseServer.Payment;
      reader.readMessage(value,proto.LighthouseServer.Payment.deserializeBinaryFromReader);
      msg.setPayment(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LighthouseServer.PaymentACK.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LighthouseServer.PaymentACK.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LighthouseServer.PaymentACK} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LighthouseServer.PaymentACK.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayment();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.LighthouseServer.Payment.serializeBinaryToWriter
    );
  }
  f = message.getMemo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Payment payment = 1;
 * @return {?proto.LighthouseServer.Payment}
 */
proto.LighthouseServer.PaymentACK.prototype.getPayment = function() {
  return /** @type{?proto.LighthouseServer.Payment} */ (
    jspb.Message.getWrapperField(this, proto.LighthouseServer.Payment, 1));
};


/** @param {?proto.LighthouseServer.Payment|undefined} value */
proto.LighthouseServer.PaymentACK.prototype.setPayment = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.LighthouseServer.PaymentACK.prototype.clearPayment = function() {
  this.setPayment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LighthouseServer.PaymentACK.prototype.hasPayment = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string memo = 2;
 * @return {string}
 */
proto.LighthouseServer.PaymentACK.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.LighthouseServer.PaymentACK.prototype.setMemo = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LighthouseServer.ProjectDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.LighthouseServer.ProjectDetail.repeatedFields_, null);
};
goog.inherits(proto.LighthouseServer.ProjectDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LighthouseServer.ProjectDetail.displayName = 'proto.LighthouseServer.ProjectDetail';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.LighthouseServer.ProjectDetail.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LighthouseServer.ProjectDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.LighthouseServer.ProjectDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LighthouseServer.ProjectDetail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LighthouseServer.ProjectDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    coverImage: msg.getCoverImage_asB64(),
    minPledgeSize: jspb.Message.getFieldWithDefault(msg, 4, 0),
    network: jspb.Message.getFieldWithDefault(msg, 5, 0),
    outputAddresses: jspb.Message.getFieldWithDefault(msg, 6, ""),
    startTime: jspb.Message.getFieldWithDefault(msg, 7, 0),
    expirationTime: jspb.Message.getFieldWithDefault(msg, 8, 0),
    ownerData: (f = msg.getOwnerData()) && proto.LighthouseServer.UserData.toObject(includeInstance, f),
    coFounderDataList: jspb.Message.toObjectList(msg.getCoFounderDataList(),
    proto.LighthouseServer.UserData.toObject, includeInstance),
    pkiType: jspb.Message.getFieldWithDefault(msg, 11, 0),
    pkiData: msg.getPkiData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LighthouseServer.ProjectDetail}
 */
proto.LighthouseServer.ProjectDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LighthouseServer.ProjectDetail;
  return proto.LighthouseServer.ProjectDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LighthouseServer.ProjectDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LighthouseServer.ProjectDetail}
 */
proto.LighthouseServer.ProjectDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCoverImage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinPledgeSize(value);
      break;
    case 5:
      var value = /** @type {!proto.LighthouseServer.ProjectDetail.Network} */ (reader.readEnum());
      msg.setNetwork(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutputAddresses(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStartTime(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExpirationTime(value);
      break;
    case 9:
      var value = new proto.LighthouseServer.UserData;
      reader.readMessage(value,proto.LighthouseServer.UserData.deserializeBinaryFromReader);
      msg.setOwnerData(value);
      break;
    case 10:
      var value = new proto.LighthouseServer.UserData;
      reader.readMessage(value,proto.LighthouseServer.UserData.deserializeBinaryFromReader);
      msg.addCoFounderData(value);
      break;
    case 11:
      var value = /** @type {!proto.LighthouseServer.ProjectDetail.PKIType} */ (reader.readEnum());
      msg.setPkiType(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPkiData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LighthouseServer.ProjectDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LighthouseServer.ProjectDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LighthouseServer.ProjectDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LighthouseServer.ProjectDetail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCoverImage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getMinPledgeSize();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getNetwork();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getOutputAddresses();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getStartTime();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getExpirationTime();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getOwnerData();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.LighthouseServer.UserData.serializeBinaryToWriter
    );
  }
  f = message.getCoFounderDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.LighthouseServer.UserData.serializeBinaryToWriter
    );
  }
  f = message.getPkiType();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getPkiData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.LighthouseServer.ProjectDetail.Network = {
  MAIN: 0,
  TEST: 1
};

/**
 * @enum {number}
 */
proto.LighthouseServer.ProjectDetail.PKIType = {
  NONE: 0,
  X509SHA256: 1
};

/**
 * optional string title = 1;
 * @return {string}
 */
proto.LighthouseServer.ProjectDetail.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LighthouseServer.ProjectDetail.prototype.setTitle = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.LighthouseServer.ProjectDetail.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.LighthouseServer.ProjectDetail.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes cover_image = 3;
 * @return {!(string|Uint8Array)}
 */
proto.LighthouseServer.ProjectDetail.prototype.getCoverImage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes cover_image = 3;
 * This is a type-conversion wrapper around `getCoverImage()`
 * @return {string}
 */
proto.LighthouseServer.ProjectDetail.prototype.getCoverImage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCoverImage()));
};


/**
 * optional bytes cover_image = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCoverImage()`
 * @return {!Uint8Array}
 */
proto.LighthouseServer.ProjectDetail.prototype.getCoverImage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCoverImage()));
};


/** @param {!(string|Uint8Array)} value */
proto.LighthouseServer.ProjectDetail.prototype.setCoverImage = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional int64 min_pledge_size = 4;
 * @return {number}
 */
proto.LighthouseServer.ProjectDetail.prototype.getMinPledgeSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.LighthouseServer.ProjectDetail.prototype.setMinPledgeSize = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional Network network = 5;
 * @return {!proto.LighthouseServer.ProjectDetail.Network}
 */
proto.LighthouseServer.ProjectDetail.prototype.getNetwork = function() {
  return /** @type {!proto.LighthouseServer.ProjectDetail.Network} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.LighthouseServer.ProjectDetail.Network} value */
proto.LighthouseServer.ProjectDetail.prototype.setNetwork = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional string output_addresses = 6;
 * @return {string}
 */
proto.LighthouseServer.ProjectDetail.prototype.getOutputAddresses = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.LighthouseServer.ProjectDetail.prototype.setOutputAddresses = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint64 start_time = 7;
 * @return {number}
 */
proto.LighthouseServer.ProjectDetail.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.LighthouseServer.ProjectDetail.prototype.setStartTime = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 expiration_time = 8;
 * @return {number}
 */
proto.LighthouseServer.ProjectDetail.prototype.getExpirationTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.LighthouseServer.ProjectDetail.prototype.setExpirationTime = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional UserData owner_data = 9;
 * @return {?proto.LighthouseServer.UserData}
 */
proto.LighthouseServer.ProjectDetail.prototype.getOwnerData = function() {
  return /** @type{?proto.LighthouseServer.UserData} */ (
    jspb.Message.getWrapperField(this, proto.LighthouseServer.UserData, 9));
};


/** @param {?proto.LighthouseServer.UserData|undefined} value */
proto.LighthouseServer.ProjectDetail.prototype.setOwnerData = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.LighthouseServer.ProjectDetail.prototype.clearOwnerData = function() {
  this.setOwnerData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LighthouseServer.ProjectDetail.prototype.hasOwnerData = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated UserData co_founder_data = 10;
 * @return {!Array.<!proto.LighthouseServer.UserData>}
 */
proto.LighthouseServer.ProjectDetail.prototype.getCoFounderDataList = function() {
  return /** @type{!Array.<!proto.LighthouseServer.UserData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.LighthouseServer.UserData, 10));
};


/** @param {!Array.<!proto.LighthouseServer.UserData>} value */
proto.LighthouseServer.ProjectDetail.prototype.setCoFounderDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.LighthouseServer.UserData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.LighthouseServer.UserData}
 */
proto.LighthouseServer.ProjectDetail.prototype.addCoFounderData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.LighthouseServer.UserData, opt_index);
};


proto.LighthouseServer.ProjectDetail.prototype.clearCoFounderDataList = function() {
  this.setCoFounderDataList([]);
};


/**
 * optional PKIType pki_type = 11;
 * @return {!proto.LighthouseServer.ProjectDetail.PKIType}
 */
proto.LighthouseServer.ProjectDetail.prototype.getPkiType = function() {
  return /** @type {!proto.LighthouseServer.ProjectDetail.PKIType} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {!proto.LighthouseServer.ProjectDetail.PKIType} value */
proto.LighthouseServer.ProjectDetail.prototype.setPkiType = function(value) {
  jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional bytes pki_data = 12;
 * @return {!(string|Uint8Array)}
 */
proto.LighthouseServer.ProjectDetail.prototype.getPkiData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes pki_data = 12;
 * This is a type-conversion wrapper around `getPkiData()`
 * @return {string}
 */
proto.LighthouseServer.ProjectDetail.prototype.getPkiData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPkiData()));
};


/**
 * optional bytes pki_data = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPkiData()`
 * @return {!Uint8Array}
 */
proto.LighthouseServer.ProjectDetail.prototype.getPkiData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPkiData()));
};


/** @param {!(string|Uint8Array)} value */
proto.LighthouseServer.ProjectDetail.prototype.setPkiData = function(value) {
  jspb.Message.setProto3BytesField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LighthouseServer.UserData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LighthouseServer.UserData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LighthouseServer.UserData.displayName = 'proto.LighthouseServer.UserData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LighthouseServer.UserData.prototype.toObject = function(opt_includeInstance) {
  return proto.LighthouseServer.UserData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LighthouseServer.UserData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LighthouseServer.UserData.toObject = function(includeInstance, msg) {
  var f, obj = {
    email: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LighthouseServer.UserData}
 */
proto.LighthouseServer.UserData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LighthouseServer.UserData;
  return proto.LighthouseServer.UserData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LighthouseServer.UserData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LighthouseServer.UserData}
 */
proto.LighthouseServer.UserData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LighthouseServer.UserData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LighthouseServer.UserData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LighthouseServer.UserData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LighthouseServer.UserData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string email = 1;
 * @return {string}
 */
proto.LighthouseServer.UserData.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LighthouseServer.UserData.prototype.setEmail = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LighthouseServer.PledgeDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LighthouseServer.PledgeDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LighthouseServer.PledgeDetails.displayName = 'proto.LighthouseServer.PledgeDetails';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LighthouseServer.PledgeDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.LighthouseServer.PledgeDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LighthouseServer.PledgeDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LighthouseServer.PledgeDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    memo: jspb.Message.getFieldWithDefault(msg, 1, ""),
    funderData: (f = msg.getFunderData()) && proto.LighthouseServer.UserData.toObject(includeInstance, f),
    inputValue: jspb.Message.getFieldWithDefault(msg, 3, 0),
    projectId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LighthouseServer.PledgeDetails}
 */
proto.LighthouseServer.PledgeDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LighthouseServer.PledgeDetails;
  return proto.LighthouseServer.PledgeDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LighthouseServer.PledgeDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LighthouseServer.PledgeDetails}
 */
proto.LighthouseServer.PledgeDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    case 2:
      var value = new proto.LighthouseServer.UserData;
      reader.readMessage(value,proto.LighthouseServer.UserData.deserializeBinaryFromReader);
      msg.setFunderData(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setInputValue(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LighthouseServer.PledgeDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LighthouseServer.PledgeDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LighthouseServer.PledgeDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LighthouseServer.PledgeDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMemo();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFunderData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.LighthouseServer.UserData.serializeBinaryToWriter
    );
  }
  f = message.getInputValue();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getProjectId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional string memo = 1;
 * @return {string}
 */
proto.LighthouseServer.PledgeDetails.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LighthouseServer.PledgeDetails.prototype.setMemo = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional UserData funder_data = 2;
 * @return {?proto.LighthouseServer.UserData}
 */
proto.LighthouseServer.PledgeDetails.prototype.getFunderData = function() {
  return /** @type{?proto.LighthouseServer.UserData} */ (
    jspb.Message.getWrapperField(this, proto.LighthouseServer.UserData, 2));
};


/** @param {?proto.LighthouseServer.UserData|undefined} value */
proto.LighthouseServer.PledgeDetails.prototype.setFunderData = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.LighthouseServer.PledgeDetails.prototype.clearFunderData = function() {
  this.setFunderData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LighthouseServer.PledgeDetails.prototype.hasFunderData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 input_value = 3;
 * @return {number}
 */
proto.LighthouseServer.PledgeDetails.prototype.getInputValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.LighthouseServer.PledgeDetails.prototype.setInputValue = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string project_id = 4;
 * @return {string}
 */
proto.LighthouseServer.PledgeDetails.prototype.getProjectId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.LighthouseServer.PledgeDetails.prototype.setProjectId = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 timestamp = 5;
 * @return {number}
 */
proto.LighthouseServer.PledgeDetails.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.LighthouseServer.PledgeDetails.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LighthouseServer.ProjectStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.LighthouseServer.ProjectStatus.repeatedFields_, null);
};
goog.inherits(proto.LighthouseServer.ProjectStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LighthouseServer.ProjectStatus.displayName = 'proto.LighthouseServer.ProjectStatus';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.LighthouseServer.ProjectStatus.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LighthouseServer.ProjectStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.LighthouseServer.ProjectStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LighthouseServer.ProjectStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LighthouseServer.ProjectStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amountPledgedSofar: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pledgesList: jspb.Message.toObjectList(msg.getPledgesList(),
    proto.LighthouseServer.PledgeDetails.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LighthouseServer.ProjectStatus}
 */
proto.LighthouseServer.ProjectStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LighthouseServer.ProjectStatus;
  return proto.LighthouseServer.ProjectStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LighthouseServer.ProjectStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LighthouseServer.ProjectStatus}
 */
proto.LighthouseServer.ProjectStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmountPledgedSofar(value);
      break;
    case 3:
      var value = new proto.LighthouseServer.PledgeDetails;
      reader.readMessage(value,proto.LighthouseServer.PledgeDetails.deserializeBinaryFromReader);
      msg.addPledges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LighthouseServer.ProjectStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LighthouseServer.ProjectStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LighthouseServer.ProjectStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LighthouseServer.ProjectStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmountPledgedSofar();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getPledgesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.LighthouseServer.PledgeDetails.serializeBinaryToWriter
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.LighthouseServer.ProjectStatus.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LighthouseServer.ProjectStatus.prototype.setTitle = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 amount_pledged_sofar = 2;
 * @return {number}
 */
proto.LighthouseServer.ProjectStatus.prototype.getAmountPledgedSofar = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.LighthouseServer.ProjectStatus.prototype.setAmountPledgedSofar = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated PledgeDetails pledges = 3;
 * @return {!Array.<!proto.LighthouseServer.PledgeDetails>}
 */
proto.LighthouseServer.ProjectStatus.prototype.getPledgesList = function() {
  return /** @type{!Array.<!proto.LighthouseServer.PledgeDetails>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.LighthouseServer.PledgeDetails, 3));
};


/** @param {!Array.<!proto.LighthouseServer.PledgeDetails>} value */
proto.LighthouseServer.ProjectStatus.prototype.setPledgesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.LighthouseServer.PledgeDetails=} opt_value
 * @param {number=} opt_index
 * @return {!proto.LighthouseServer.PledgeDetails}
 */
proto.LighthouseServer.ProjectStatus.prototype.addPledges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.LighthouseServer.PledgeDetails, opt_index);
};


proto.LighthouseServer.ProjectStatus.prototype.clearPledgesList = function() {
  this.setPledgesList([]);
};


goog.object.extend(exports, proto.LighthouseServer);
